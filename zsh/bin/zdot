#!/usr/bin/env zsh
emulate -L zsh

dot_parent_dir="$ZDOTDIR/dots"
dot_file_prefix="$dot_parent_dir/dot-"
dot_files=($dot_file_prefix*(N.))
dots_list=$(print -l ${dot_files:t:r} | cut -d"-" -f 2)

function error_message() {
	ink -l -c red -t 2 -- "$@"
}

function success_message() {
	ink -l -c green -- "$@"
}

# Gets the file of a dot name
function include_dot_file() {
	local darg="$1"
	dot_file=(${dot_file_prefix}${darg}*(N.))
	file_name="${dot_file:t:r}"
	dot_name="${file_name#dot-}"
}

# Run a specific dot
function include_dot() {
	include_dot_file "$1"

	if [[ ! -f $dot_file ]] {
		error_message "Error while loading dot $require_dot_arg"
	}

	ink -l -c blue "Running $dot_name dot"

	$dot_file

	local exit_code=$?
	# Magic exit code for not compatible ones.
	if (( $exit_code == 34 )) {
		error_message "$dot_name is not compatible with this system."
	} elif (( $exit_code != 0 )) {
		error_message "Error while executing $dot_name"
		exit 1
	}
}

# Include multiple dots
function include_dots() {
	# @TODO: async?
	while (($#)); do
		include_dot $1
		(( $+commands[hr] )) && hr ' ' '-=' ' '
		shift
	done
}

# Create a dot as a template.
function create_dot() {
	local darg=$1
	include_dot_file $darg

	if [[ -n $dot_name ]] {
		error_message "Cannot create dot, already exists: $dot_name"
		exit 1
	}

	local dot_file="${dot_file_prefix}${darg}"
	touch $dot_file
	chmod +x $dot_file
	success_message "Dot created: '$darg' at '$dot_file'"
}

# Run the default dots.
function default_dots() {
	# Set OS X defaults
	# include_dot macos "Running MacOS Defaults dot..."

	# Install homebrew packages
	[[ $OSTYPE =~ darwin ]] && include_dot homebrew

	# Config dot
	include_dot config

	# Linix Packages, right now only ubuntu..
	[[ $OSTYPE =~ linux ]] && include_dot ubuntu

	# Install python packages
	include_dot python

	# Install node packages
	include_dot node

	# Install ruby packages
	include_dot ruby

	# Install vim packages
	include_dot vim
}

local mode="run"
while getopts cl opt; do
  case $opt in
		(l)
			print -l $dots_list
			return
			;;
		(c)
			mode="create"
			;;
	esac
done
shift $(( OPTIND - 1 ))

if [[ $mode == "run" ]] {
	if (($#)) {
		include_dots $*
	} else {
		default_dots
	}
} elif [[ $mode == "create" ]] {
	create_dot $*
}
